# coding: utf-8

"""
    nexchange

    API for crypto currency exchange.

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..api_client import ApiClient


class DefaultApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def en_api_v1_currency_get(self, **kwargs):
        """
        Get Currencies
        Get pairs.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.en_api_v1_currency_get(async=True)
        >>> result = thread.get()

        :param async bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.en_api_v1_currency_get_with_http_info(**kwargs)
        else:
            (data) = self.en_api_v1_currency_get_with_http_info(**kwargs)
            return data

    def en_api_v1_currency_get_with_http_info(self, **kwargs):
        """
        Get Currencies
        Get pairs.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.en_api_v1_currency_get_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method en_api_v1_currency_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/en/api/v1/currency/', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def en_api_v1_orders_get(self, page, page_size, **kwargs):
        """
        Get Orders
        Gets list of orders.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.en_api_v1_orders_get(page, page_size, async=True)
        >>> result = thread.get()

        :param async bool
        :param str page:  (required)
        :param str page_size:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.en_api_v1_orders_get_with_http_info(page, page_size, **kwargs)
        else:
            (data) = self.en_api_v1_orders_get_with_http_info(page, page_size, **kwargs)
            return data

    def en_api_v1_orders_get_with_http_info(self, page, page_size, **kwargs):
        """
        Get Orders
        Gets list of orders.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.en_api_v1_orders_get_with_http_info(page, page_size, async=True)
        >>> result = thread.get()

        :param async bool
        :param str page:  (required)
        :param str page_size:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'page_size']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method en_api_v1_orders_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'page' is set
        if ('page' not in params) or (params['page'] is None):
            raise ValueError("Missing the required parameter `page` when calling `en_api_v1_orders_get`")
        # verify the required parameter 'page_size' is set
        if ('page_size' not in params) or (params['page_size'] is None):
            raise ValueError("Missing the required parameter `page_size` when calling `en_api_v1_orders_get`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/en/api/v1/orders/', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def en_api_v1_orders_post(self, **kwargs):
        """
        Create Anonymous Order
        Create order.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.en_api_v1_orders_post(async=True)
        >>> result = thread.get()

        :param async bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.en_api_v1_orders_post_with_http_info(**kwargs)
        else:
            (data) = self.en_api_v1_orders_post_with_http_info(**kwargs)
            return data

    def en_api_v1_orders_post_with_http_info(self, **kwargs):
        """
        Create Anonymous Order
        Create order.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.en_api_v1_orders_post_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method en_api_v1_orders_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/en/api/v1/orders/', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def en_api_v1_orders_unique_reference_get(self, unique_reference, **kwargs):
        """
        Get Order
        Get order data.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.en_api_v1_orders_unique_reference_get(unique_reference, async=True)
        >>> result = thread.get()

        :param async bool
        :param str unique_reference:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.en_api_v1_orders_unique_reference_get_with_http_info(unique_reference, **kwargs)
        else:
            (data) = self.en_api_v1_orders_unique_reference_get_with_http_info(unique_reference, **kwargs)
            return data

    def en_api_v1_orders_unique_reference_get_with_http_info(self, unique_reference, **kwargs):
        """
        Get Order
        Get order data.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.en_api_v1_orders_unique_reference_get_with_http_info(unique_reference, async=True)
        >>> result = thread.get()

        :param async bool
        :param str unique_reference:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['unique_reference']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method en_api_v1_orders_unique_reference_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'unique_reference' is set
        if ('unique_reference' not in params) or (params['unique_reference'] is None):
            raise ValueError("Missing the required parameter `unique_reference` when calling `en_api_v1_orders_unique_reference_get`")


        collection_formats = {}

        path_params = {}
        if 'unique_reference' in params:
            path_params['unique_reference'] = params['unique_reference']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/en/api/v1/orders/{unique_reference}/', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def en_api_v1_pair_get(self, **kwargs):
        """
        Get Pairs
        Get pairs.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.en_api_v1_pair_get(async=True)
        >>> result = thread.get()

        :param async bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.en_api_v1_pair_get_with_http_info(**kwargs)
        else:
            (data) = self.en_api_v1_pair_get_with_http_info(**kwargs)
            return data

    def en_api_v1_pair_get_with_http_info(self, **kwargs):
        """
        Get Pairs
        Get pairs.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.en_api_v1_pair_get_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method en_api_v1_pair_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/en/api/v1/pair/', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def en_api_v1_price_pair_name_history_get(self, pair_name, hours, data_points, **kwargs):
        """
        Get Ticker History
        Gets latests price of selected pair.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.en_api_v1_price_pair_name_history_get(pair_name, hours, data_points, async=True)
        >>> result = thread.get()

        :param async bool
        :param str pair_name:  (required)
        :param str hours:  (required)
        :param str data_points:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.en_api_v1_price_pair_name_history_get_with_http_info(pair_name, hours, data_points, **kwargs)
        else:
            (data) = self.en_api_v1_price_pair_name_history_get_with_http_info(pair_name, hours, data_points, **kwargs)
            return data

    def en_api_v1_price_pair_name_history_get_with_http_info(self, pair_name, hours, data_points, **kwargs):
        """
        Get Ticker History
        Gets latests price of selected pair.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.en_api_v1_price_pair_name_history_get_with_http_info(pair_name, hours, data_points, async=True)
        >>> result = thread.get()

        :param async bool
        :param str pair_name:  (required)
        :param str hours:  (required)
        :param str data_points:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pair_name', 'hours', 'data_points']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method en_api_v1_price_pair_name_history_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pair_name' is set
        if ('pair_name' not in params) or (params['pair_name'] is None):
            raise ValueError("Missing the required parameter `pair_name` when calling `en_api_v1_price_pair_name_history_get`")
        # verify the required parameter 'hours' is set
        if ('hours' not in params) or (params['hours'] is None):
            raise ValueError("Missing the required parameter `hours` when calling `en_api_v1_price_pair_name_history_get`")
        # verify the required parameter 'data_points' is set
        if ('data_points' not in params) or (params['data_points'] is None):
            raise ValueError("Missing the required parameter `data_points` when calling `en_api_v1_price_pair_name_history_get`")


        collection_formats = {}

        path_params = {}
        if 'pair_name' in params:
            path_params['pair_name'] = params['pair_name']

        query_params = []
        if 'hours' in params:
            query_params.append(('hours', params['hours']))
        if 'data_points' in params:
            query_params.append(('data_points', params['data_points']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/en/api/v1/price/{pair_name}/history/', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def en_api_v1_price_pair_name_latest_get(self, pair_name, **kwargs):
        """
        Get Latest Ticker
        Gets latests price of selected pair.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.en_api_v1_price_pair_name_latest_get(pair_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str pair_name:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.en_api_v1_price_pair_name_latest_get_with_http_info(pair_name, **kwargs)
        else:
            (data) = self.en_api_v1_price_pair_name_latest_get_with_http_info(pair_name, **kwargs)
            return data

    def en_api_v1_price_pair_name_latest_get_with_http_info(self, pair_name, **kwargs):
        """
        Get Latest Ticker
        Gets latests price of selected pair.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.en_api_v1_price_pair_name_latest_get_with_http_info(pair_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str pair_name:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pair_name']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method en_api_v1_price_pair_name_latest_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pair_name' is set
        if ('pair_name' not in params) or (params['pair_name'] is None):
            raise ValueError("Missing the required parameter `pair_name` when calling `en_api_v1_price_pair_name_latest_get`")


        collection_formats = {}

        path_params = {}
        if 'pair_name' in params:
            path_params['pair_name'] = params['pair_name']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/en/api/v1/price/{pair_name}/latest/', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def en_api_v1_users_me_orders_get(self, page, page_size, **kwargs):
        """
        Get User Orders
        Get user orders.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.en_api_v1_users_me_orders_get(page, page_size, async=True)
        >>> result = thread.get()

        :param async bool
        :param str page:  (required)
        :param str page_size:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.en_api_v1_users_me_orders_get_with_http_info(page, page_size, **kwargs)
        else:
            (data) = self.en_api_v1_users_me_orders_get_with_http_info(page, page_size, **kwargs)
            return data

    def en_api_v1_users_me_orders_get_with_http_info(self, page, page_size, **kwargs):
        """
        Get User Orders
        Get user orders.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.en_api_v1_users_me_orders_get_with_http_info(page, page_size, async=True)
        >>> result = thread.get()

        :param async bool
        :param str page:  (required)
        :param str page_size:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'page_size']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method en_api_v1_users_me_orders_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'page' is set
        if ('page' not in params) or (params['page'] is None):
            raise ValueError("Missing the required parameter `page` when calling `en_api_v1_users_me_orders_get`")
        # verify the required parameter 'page_size' is set
        if ('page_size' not in params) or (params['page_size'] is None):
            raise ValueError("Missing the required parameter `page_size` when calling `en_api_v1_users_me_orders_get`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/en/api/v1/users/me/orders/', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def en_api_v1_users_me_orders_post(self, **kwargs):
        """
        Create User Order
        Create order.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.en_api_v1_users_me_orders_post(async=True)
        >>> result = thread.get()

        :param async bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.en_api_v1_users_me_orders_post_with_http_info(**kwargs)
        else:
            (data) = self.en_api_v1_users_me_orders_post_with_http_info(**kwargs)
            return data

    def en_api_v1_users_me_orders_post_with_http_info(self, **kwargs):
        """
        Create User Order
        Create order.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.en_api_v1_users_me_orders_post_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method en_api_v1_users_me_orders_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/en/api/v1/users/me/orders/', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def en_api_v1_users_me_orders_unique_reference_get(self, unique_reference, **kwargs):
        """
        Get User Order
        Get user order.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.en_api_v1_users_me_orders_unique_reference_get(unique_reference, async=True)
        >>> result = thread.get()

        :param async bool
        :param str unique_reference:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.en_api_v1_users_me_orders_unique_reference_get_with_http_info(unique_reference, **kwargs)
        else:
            (data) = self.en_api_v1_users_me_orders_unique_reference_get_with_http_info(unique_reference, **kwargs)
            return data

    def en_api_v1_users_me_orders_unique_reference_get_with_http_info(self, unique_reference, **kwargs):
        """
        Get User Order
        Get user order.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.en_api_v1_users_me_orders_unique_reference_get_with_http_info(unique_reference, async=True)
        >>> result = thread.get()

        :param async bool
        :param str unique_reference:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['unique_reference']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method en_api_v1_users_me_orders_unique_reference_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'unique_reference' is set
        if ('unique_reference' not in params) or (params['unique_reference'] is None):
            raise ValueError("Missing the required parameter `unique_reference` when calling `en_api_v1_users_me_orders_unique_reference_get`")


        collection_formats = {}

        path_params = {}
        if 'unique_reference' in params:
            path_params['unique_reference'] = params['unique_reference']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/en/api/v1/users/me/orders/{unique_reference}/', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
